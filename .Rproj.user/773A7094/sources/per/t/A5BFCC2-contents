#' Measure excess attenuation
#' 
#' \code{blurr_ratio} Measure excess attenuation in signals referenced in a extended selection table.
#' @usage blurr_ratio(X, mar, parallel = 1, pb = TRUE, method = 1, eq.dur = FALSE,
#' noise.ref = "before", bp = NULL, wl = 10, output = "data.frame")
#' @param X object of class 'selection_table', 'extended_selection_table' created by the function \code{\link[warbleR]{selection_table}} from the warbleR package.
#' @param mar numeric vector of length 1. Specifies the margins adjacent to
#'   the start and end points of selection over which to measure noise.
#' @param parallel Numeric. Controls whether parallel computing is applied.
#' It specifies the number of cores to be used. Default is 1 (i.e. no parallel computing).
#' If \code{NULL} (default) then the current working directory is used.
#' @param pb Logical argument to control if progress bar is shown. Default is \code{TRUE}. It can also be
#' set globally using the 'pb' option (see \code{\link{warbleR_options}}).
#' @param method Character string indicating the correlation coefficient to be applied ("pearson", "spearman", or "kendall", see \code{\link[stats]{cor}}).
#' @param eq.dur Logical. Controls whether the noise segment that is measured has the same duration 
#' than the signal (if \code{TRUE}, default \code{FALSE}). If \code{TRUE} then 'mar' argument is ignored.
#' @param noise.ref Character with the name of the column that contains tags for "signal" and "noise". This can be used to apply the same noise reference to all signals in a sound file. Therefore, at least one "noise" selection for each sound file must be provided. Default is \code{NULL}.
#' @param bp Numeric vector of length 2 giving the lower and upper limits of a frequency bandpass filter (in kHz). Default is \code{NULL}.
#' @param wl A numeric vector of length 1 specifying the window length of the spectrogram for applying bandpass. Default 
#'   is 10. Ignored if \code{bp = NULL}.
#'  Note that lower values will increase time resolution, which is more important for amplitude ratio calculations. 
#' @param output Character vector of length 1 to determine if an extended selection table ('est') or a data frame ('data.frame') is returned.
#' @return Data frame similar to input data, but also includes a new column 
#' with the excess attenuation values.
#' @export
#' @name blurr_ratio
#' @details Excess attenuation is the attenuation of a sound in excess of that due to spherical spreading as described by Dabelsteen et al 1993. The goal of the function is to measure the excess attenuation on signals in which a master playback has been re-recorded at different distances. The 'signal.id' column must be used to tell the function to only compare signals belonging to the same category (e.g. song-types). Two methods for calculating excess attenuation are provided   
#' @examples
#' {
#' # First set temporary folder
#' # setwd(tempdir())
#' 
#' data("playback_est")
#' 
#' # using margin for noise and method 1
#'blurr_ratio(X = playback_est, mar = 0.05)
#' 
#' # using margin for noise and method 2
#' blurr_ratio(X = playback_est, mar = 0.05, method = 2)
#' }
#' 
#' @author Marcelo Araya-Salas (\email{marceloa27@@gmail.com}) #' @references {
#' Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation of sound signals: Quantifying the effects of communication sounds and bird location on blur ratio, excess attenuation, and signal-to-noise ratio in blackbird song. The Journal of the Acoustical Society of America, 93(4), 2206.
#' }
#last modification on oct-16-2019 (MAS)

blurr_ratio <- function(X, mar, parallel = 1, pb = TRUE, method = 1, eq.dur = FALSE,
                       noise.ref = "before", bp = NULL, wl = 10, output = "data.frame"){
  
  # set pb options 
  on.exit(pbapply::pboptions(type = .Options$pboptions$type), add = TRUE)
  
  # If parallel is not numeric
  if (!is.numeric(parallel)) stop("'parallel' must be a numeric vector of length 1") 
  if (any(!(parallel %% 1 == 0),parallel < 1)) stop("'parallel' should be a positive integer")
  
  # If method is not numeric
  if (!is.character(method)) stop("'method' must be a character vector of length 1") 
  if (!any(method %in%  c("pearson", "kendall", "spearman"))) stop("'method' must be either  'pearson', 'kendall' or 'spearman'")
  
  #check output
  if (!any(output %in% c("est", "data.frame"))) stop("'output' must be either 'est' or 'data.frame'")  
  
  # function to measure blurr ratio (envelope correlation)
  rms_FUN <- function(y, z, mar, bp, wl, noise.ref){
    
    # Read sound files to get sample rate and length
    sgnl <- warbleR::read_wave(X = X, index = y)
    
    # extract signal
    signal <- seewave::cutw(r, from =  mar1, to = mar2, f = f)
    
    # Identify areas before signal over which to measure noise if noise.ref not provided
    noise1 <- seewave::cutw(r, from =  0, to = mar1, f = f)
    
    # get RMS for signal
    sigRMS <- seewave::rms(seewave::env(signal, f = f, envt = "abs", plot = FALSE))
    sigRMS <- 20*log10(sigRMS)
    
    # get RMS for background noise
    bgRMS <- seewave::rms(seewave::env(noise1, f = f, envt = "abs", plot = FALSE))
    bgRMS <- 20*log10(bgRMS)
    
    return(data.frame(X[y, , drop = FALSE], sigRMS, bgRMS))
  }
  
  # set pb options 
  pbapply::pboptions(type = ifelse(as.logical(pb), "timer", "none"))
  
  # set clusters for windows OS
  if (Sys.info()[1] == "Windows" & parallel > 1)
    cl <- parallel::makePSOCKcluster(getOption("cl.cores", parallel)) else cl <- parallel
  
  # run loop apply function
  RMS <- pbapply::pblapply(X = 1:nrow(X), cl = cl, FUN = function(y)  rms_FUN(y = y, mar, wl)) 
  
  
  # put in a data frame
  RMS_df <- do.call(rbind, RMS)
  
  if (noise.ref == "custom")
  {
    W <- RMS_df[RMS_df$type == "background", ]
    
    RMS_df <- RMS_df[RMS_df$type == "signal", ]
    
    X <- X[X$type == "signal", ]
    
    RMS_df$bgRMS <- sapply(1:nrow(RMS_df), function(x) W$sigRMS[W$sound.files == RMS_df$sound.files[x]])
  }
  
  # add signal.id column if not provided, each recording will be assumed to be composed of a single signal type
  if (is.null(X$signal.id)) 
    RMS_df$signal.id <- X$sound.files
  
  # split by signal ID
  RMS_list <- split(RMS_df, RMS_df$signal.id)
  
  # calculate excess attenuation
  X$EA <- unlist(sapply(RMS_list, function(Y, meth = method){
    
    # method 1 compare to closest distance to source
    if (meth == 1){
      # extract RMS of signal and background references
      sig_RMS_REF <- Y$sigRMS[which.min(Y$distance)]
      bg_RMS_REF <- Y$bgRMS[which.min(Y$distance)]
      dist_REF <- Y$distance[which.min(Y$distance)]
      
      # term 1: decrease in signal amplitude (RMS) of reference (Ref) vs re-recorded (RR)
      term1 <- sig_RMS_REF - Y$sigRMS 
      
      # lost due to spheric spreading
      term2 <- -20 * log10(1 / Y$distance)
      
      # distance traveled by sound
      term3 <- Y$distance - dist_REF
      
      # excess attenuation = (total attenuation - spheric spreading attenuation) / distance
      EA <- (term1 + term2) / term3
      EA[which.min(Y$distance)] <- NA
    }
    
    # compare to previous distance 
    if (meth == 2){
      
      # save original order
      Y$org.ord <- 1:nrow(Y)
      
      # sort by distance
      Y <- Y[order(Y$distance), ]
      
      # term 1: decrease in signal amplitude (RMS) of reference (Ref) vs re-recorded (RR)
      term1 <- Y$sigRMS[-nrow(Y)] - Y$sigRMS[-1] 
      
      # lost due to spheric spreading
      term2 <- -20 * log10(1 / (Y$distance[-1]))
      
      # distance traveled by sound
      term3 <- Y$distance[-1] - Y$distance[-nrow(Y)]
      
      # excess attenuation = (total attenuation - spheric spreading attenuation) / distance
      EA <- (term1 + term2) / term3
      
      # add NA for first distance
      EA <- c(NA, EA)      
      
      # reorder results
      EA <- EA[order(Y$org.ord)]
    }
    
    return(EA)
    
  }, simplify = FALSE))
  
  # convert to data frame instead of extended selection table
  if (output == "data.frame") 
    X <- as.data.frame(X)
  
  return(X)
}
