envs[[X$TEMP....y[y]]]
bg_RMS <- seewave::rms(envs[[X$TEMP....y[y]]]$bg.env)
# signal RMS
sig_RMS <- seewave::rms(envs[[X$TEMP....y[y]]]$sig.env)
names(envs)
X[y,]
X$sound.files[y]
envs[X$TEMP....y[X$sound.files == X$sound.files[y]]]
# get mean RMS from noise selections
bg_envs <- sapply(envs[X$TEMP....y[X$sound.files == X$sound.files[y]]], X$sig.env)
bg_envs <- sapply(envs[X$TEMP....y[X$sound.files == X$sound.files[y]]], "[", 'sig.env')
bg_envs
str(bg_envs)
# get mean RMS from noise selections
bg_envs <- sapply(envs[X$TEMP....y[X$sound.files == X$sound.files[y] & X$signal.id == "noise"]], "[", 'sig.env')
str(bg_envs)
sapply(bg_envs, c)
bg_RMS <- seewave::rms(sapply(bg_envs, c))
a <- sapply(bg_envs, c)
str(a)
bg_RMS <- seewave::rms(sapply(bg_envs, unlist))
sapply(bg_envs, unlist)
c(bg_envs)
str(sapply(bg_envs, as.vector))
str(c(sapply(bg_envs, as.vector)))
str(unlist(sapply(bg_envs, as.vector)))
bg_RMS <- seewave::rms(unlist(sapply(bg_envs, as.vector)))
bg_RMS
out <- sapply(1:nrow(X), function(y){
if (X$signal.id[y] != "noise"){
# signal RMS
sig_RMS <- seewave::rms(envs[[X$TEMP....y[y]]]$sig.env)
# get referene noise RMS
if (noise.ref == "adjacent"){
bg_RMS <- seewave::rms(envs[[X$TEMP....y[y]]]$bg.env)
} else {
# get envelopes from noise selections
bg_envs <- sapply(envs[X$TEMP....y[X$sound.files == X$sound.files[y] & X$signal.id == "noise"]], "[", 'sig.env')
# get mean RMS from combined envelopes
bg_RMS <- seewave::rms(unlist(sapply(bg_envs, as.vector)))
}
# Calculate signal-to-noise ratio
snr <- (sig_RMS - bg_RMS) / bg_RMS
return(20*log10(snr))
} else return(NA) # return NA if current row is noise
})
out
X
X$SNR_att <- sapply(1:nrow(X), function(y){
if (X$signal.id[y] != "noise"){
# signal RMS
sig_RMS <- seewave::rms(envs[[X$TEMP....y[y]]]$sig.env)
# get referene noise RMS
if (noise.ref == "adjacent"){
bg_RMS <- seewave::rms(envs[[X$TEMP....y[y]]]$bg.env)
} else {
# get envelopes from noise selections
bg_envs <- sapply(envs[X$TEMP....y[X$sound.files == X$sound.files[y] & X$signal.id == "noise"]], "[", 'sig.env')
# get mean RMS from combined envelopes
bg_RMS <- seewave::rms(unlist(sapply(bg_envs, as.vector)))
}
# Calculate signal-to-noise ratio
snr <- (sig_RMS - bg_RMS) / bg_RMS
return(20*log10(snr))
} else return(NA) # return NA if current row is noise
})
X$SNR_att
View(X)
signal <- seewave::ffilter(signal, f = signal@samp.rate, from = bp[1] * 1000, ovlp = 0,
to = bp[2] * 1000, bandpass = TRUE, wl = wl,
output = "Wave")
bp
bp <- c(2, 10)
signal <- seewave::ffilter(signal, f = signal@samp.rate, from = bp[1] * 1000, ovlp = 0,
to = bp[2] * 1000, bandpass = TRUE, wl = wl,
output = "Wave")
FUN <- "snr_att"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
snr_att(X = playback_est, mar = 0.05)
source('~/Dropbox/baRulho/R/snr_att.R')
source('~/Dropbox/baRulho/R/snr_att.R')
snr_att(X = playback_est, mar = 0.05)
snr_att(X = playback_est, mar = 0.05, noise.ref = 'custom')
snr_att(X = playback_est, mar = 0.05, noise.ref = 'custom')
est.pb[1:7,]
# create data examples for baRulho
# read data from REU playback project
est <- readRDS("/home/m/Dropbox/Projects/LBH_songtype_degradation/Extended selection table re-recorded playbacks.RDS")
st1 <- attr(est,  "check.results")
st1$bottom.freq <- est$bottom.freq
st1$top.freq <- est$top.freq
st1$lek.song.type <- est$lek.song.type
st1 <- st1[order(st1$orig.sound.files, st1$start), ]
# list waves
lw <- list.files(path = "/home/m/Dropbox/R package testing/baRulho/wavs")
st1 <- st1[st1$orig.sound.files %in% lw, ]
st1 <- st1[st1$lek.song.type != "template", ]
# set.seed(15)
# smp <- sample(unique(st1$lek.song.type), 5)
# st1 <- st1[st1$lek.song.type %in% c("BR1-D4", "CCE-I2", "CCL-M1", "HC1-F2", "SUR-J2"),]
st1$distance <- NA
st1$distance[st1$orig.sound.files == "Playback_sound_file_LBH_degradation.wav"] <- 1
st1$distance[st1$orig.sound.files == "2W.10m.2019.7.1.10.20.wav"] <- 10
st1$distance[st1$orig.sound.files == "2W.15m.2019.7.1.10.30.wav"] <- 15
st1$distance[st1$orig.sound.files == "2W.5m.2019.7.1.10.10.wav"] <- 5
# select song types that are next to each other in playback so they can be in a by.song EST
st1 <- st1[ave(-(1:nrow(st1)), st1$orig.sound.files, FUN = rank) %in% 26:30, ]
# check counts per song type
table(st1$lek.song.type, st1$distance)
# # rename columns
st1$start <- st1$orig.start
st1$end <- st1$orig.end
st1$sound.files <- st1$orig.sound.files
st1$selec <- st1$orig.selec
# add background noise selection
st2 <- st1[seq(1, nrow(st1), by = 5), ]
st3 <- st1[seq(1, nrow(st1), by = 5), ]
st2$start <- st2$start + 0.748
st2$end <- st2$end + 0.748
st3$start <- st3$start + 1.715
st3$end <- st3$end + 1.715
st4 <- rbind(st3, st2)
st4$lek.song.type <- "noise"
st1 <- rbind(st1, st4)
st1 <- st1[order(st1$distance, st1$start),]
st1$selec <- rep(1:7, 4)
# remove columns
st1$mar.after <- st1$mar.before <- st1$orig.selec <- st1$n.samples <- st1$channels <- st1$sample.rate <- st1$duration <- st1$bits <- st1$wav.size <- st1$orig.start <- st1$orig.end <- NULL
# # make EST
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  10), unit = "16")
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- resample_est(est.pb, samp.rate = 44.1)
# specan(est.pb)
# a <- Rraven::exp_est(est.pb, path = "/home/m/Dropbox/R package testing/baRulho/wavs/test", selection.table = FALSE)
est.pb$sound.files <- paste0(st1$orig.sound.files, "_1")
attributes(est.pb)$check.results$sound.files <- est.pb$sound.files
names(attributes(est.pb)$wave.objects) <- unique(paste0(st1$orig.sound.files, "_1"))
playback_est <- est.pb
# specan(playback_est)
# View(playback_est)
playback_est <- playback_est[order(playback_est$signal.id, playback_est$start), ]
# save(playback_est, file="~/Dropbox/baRulho/data/playback_est.rda")
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
# add background noise
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  10), unit = "16") *10
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
# add background noise
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  10), unit = "16") *100
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
# add background noise
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  30), unit = "16") *100
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- resample_est(est.pb, samp.rate = 44.1)
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
# add background noise
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  40), unit = "16") *100
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- resample_est(est.pb, samp.rate = 44.1)
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
# add background noise
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  40), unit = "16") *100
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- resample_est(est.pb, samp.rate = 44.1)
# # make EST
est.pb <- selection_table(X = st1, path = "/home/m/Dropbox/R package testing/baRulho/wavs", extended = TRUE, confirm.extended = FALSE, mar = 0.05, by.song = "sound.files")
# remove columns
est.pb$plbk.file <- est.pb$comments <- est.pb$life.span.class <- est.pb$SNR <- est.pb$orig.sound.fil <- est.pb$Lek <- est.pb$Point.ID <- est.pb$orig.sound.fil <- est.pb$type <- est.pb$Cardinal.point <- est.pb$Speaker  <- est.pb$Vegetation.dens <- est.pb$orig.sound.files <- NULL
names(est.pb)[7:8] <- c("signal.id", "distance")
format(object.size(est.pb), units = "auto")
wv <- attr(est.pb, "wave.objects")[[1]]
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
# add background noise
attributes(est.pb)$wave.objects[[1]] <- normalize(wv + rnorm(n = length(wv@left), mean = 0, sd =  60), unit = "16") *100
sig2noise(est.pb[1:7,], mar = 0.05)$SNR
est.pb <- resample_est(est.pb, samp.rate = 44.1)
est.pb$sound.files <- paste0(st1$orig.sound.files, "_1")
attributes(est.pb)$check.results$sound.files <- est.pb$sound.files
names(attributes(est.pb)$wave.objects) <- unique(paste0(st1$orig.sound.files, "_1"))
playback_est <- est.pb
rownames(playback_est) <- 1:nrow(playback_est)
playback_est <- playback_est[order(playback_est$signal.id, playback_est$start), ]
rownames(playback_est) <- 1:nrow(playback_est)
save(playback_est, file="~/Dropbox/baRulho/data/playback_est.rda")
source('~/Dropbox/baRulho/R/atmospheric_att.R')
source('~/Dropbox/baRulho/R/snr_att.R')
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "warbleR", "monitoR", "pkgdown", "ape", "baRulho")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven", "baRluho", "NatureSounds")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
}
)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("~/Dropbox/baRulho/R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "/home/m/Dropbox/baRulho/R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "/home/m/Dropbox/baRulho/R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "/home/m/Dropbox/baRulho/R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "/home/m/Dropbox/baRulho/R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "/home/m/Dropbox/baRulho/R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
source('~/Dropbox/baRulho/R/atmospheric_attenuation.R')
source('~/Dropbox/baRulho/R/atmospheric_attenuation.R')
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
playback_est
save(playback_est, file="~/Dropbox/baRulho/data/playback_est.rda",   version = 2)
FUN <- "snr_attenuation"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
snr_attenuation(X = playback_est, mar = 0.05, noise.ref = 'custom')
# remove noise selections
pe <- playback_est[playback_est$signal.id != "noise", ]
snr_attenuation(X = pe, mar = 0.05, noise.ref = 'adjancent')
snr_attenuation(X = pe, mar = 0.05, noise.ref = 'adjacent')
source('~/Dropbox/baRulho/R/snr_attenuation.R')
snr_attenuation(X = pe, mar = 0.05, noise.ref = 'adjacent')
X <- pe
X$signal.id
snr_attenuation(X = pe, mar = 0.05, noise.ref = 'adjacent')
source('~/Dropbox/baRulho/R/snr_attenuation.R')
snr_attenuation(X = pe, mar = 0.05, noise.ref = 'adjacent')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/baRulho/R/excess_attenuation.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
playback_est
source("~/Dropbox/warbleR/R/resample_est.R")
playback_est <- resample_est(playback_est, samp.rate = 44.1)
save(playback_est, file="~/Dropbox/baRulho/data/playback_est.rda",   version = 2)
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
# check spelling
devtools::spell_check("/home/m/Dropbox/baRulho")
path <- "~/Dropbox/baRulho/R"
pattern <-  'inmediately'
find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)
repl <- 'immediately'
repl.text(pattern = pattern, repl = repl, path = path)
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
# check spelling
devtools::spell_check("/home/m/Dropbox/baRulho")
unlink(list.files(pattern = "warbleR\\.pdf", path = "/home/m/Dropbox/baRulho/"))
# only build manual
setwd("/home/m/Dropbox/baRulho")
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
unlink(list.files(pattern = "warbleR\\.pdf", path = "/home/m/Dropbox/baRulho/"))
# only build manual
setwd("/home/m/Dropbox/baRulho")
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
unlink(list.files(pattern = "warbleR\\.pdf", path = "/home/m/Dropbox/baRulho/"))
# only build manual
setwd("/home/m/Dropbox/baRulho")
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
unlink(list.files(pattern = "baRulho\\.pdf", path = "/home/m/Dropbox/baRulho/"))
# only build manual
setwd("/home/m/Dropbox/baRulho")
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
setwd("~/Dropbox/baRulho")
#built site
pkgdown::build_site(pkg = "~/Dropbox/baRulho")
system("git add .")
system('git commit -m  "rename functions"')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#built site
pkgdown::build_site(pkg = "~/Dropbox/baRulho")
unlink(list.files(pattern = "baRulho\\.pdf", path = "/home/m/Dropbox/baRulho/"))
# only build manual
setwd("/home/m/Dropbox/baRulho")
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
