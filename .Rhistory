X$pb.start[1] <- seewave::duration(strt_mrkr)
# read first selection
plbck <- warbleR::read_wave(X, index = 1)
# duration first selection
dr1 <- seewave::duration(plbck)
# add gap
plbck <- seewave::addsilw(plbck, d = gap.duration, output = "Wave", at = "end")
# normalize
plbck <- tuneR::normalize(plbck)
# add start marker
plbck <- seewave::pastew(plbck, strt_mrkr, output =  "Wave")
# add end column
X$pb.end <- NA
# add duration of first selection
X$pb.end[1] <- X$pb.start[1] + dr1
# concatenate all selection with a loop
for(i in 2:nrow(X))
{
# read waves
wv <- warbleR::read_wave(X, index = i)
# save duration in sel tab
X$pb.start[i] <- seewave::duration(plbck)
X$pb.end[i] <- seewave::duration(plbck) + seewave::duration(wv)
# add gaps
wv <- seewave::addsilw(wv, d = gap.duration, output = "Wave", at = "end")
# normalize
wv <- tuneR::normalize(wv)
# add to master playback
plbck <- seewave::pastew(wv, plbck, output =  "Wave")
}
# add end marker
plbck <- seewave::pastew(end_mrkr, plbck, output =  "Wave")
# normalize whole master playback
plbck <- tuneR::normalize(plbck, unit = "16")
# margin range for selections on markers
mar.f <- (flim[2] - flim[1]) / 3
# add .wav at the end of file.name if not included
if(!grepl("\\.wav$", file.name, ignore.case = TRUE)) file.name <- paste0(file.name, ".wav")
# create selection table
sel.tab <- data.frame(
sound.files = file.name,
selec =  1:(nrow(X) + 2),
start = c(delay, X$pb.start, X$pb.end[nrow(X)] + gap.duration),
end = c(delay + dur_strt_mrkr, X$pb.end, X$pb.end[nrow(X)] + gap.duration + dur_end_mrkr),
bottom.freq = c(flim[1] + mar.f, X$bottom.freq, flim[1] + mar.f),
top.freq = c(flim[2] - mar.f, X$top.freq, flim[2] - mar.f),
orig.sound.file = c("start_marker", X$sound.files, "end_marker"))
, delay = 4.431
# create selection table
sel.tab <- data.frame(
sound.files = file.name,
selec =  1:(nrow(X) + 2),
start = c(delay, X$pb.start, X$pb.end[nrow(X)] + gap.duration),
end = c(delay + dur_strt_mrkr, X$pb.end, X$pb.end[nrow(X)] + gap.duration + dur_end_mrkr),
bottom.freq = c(flim[1] + mar.f, X$bottom.freq, flim[1] + mar.f),
top.freq = c(flim[2] - mar.f, X$top.freq, flim[2] - mar.f),
orig.sound.file = c("start_marker", X$sound.files, "end_marker"))
delay = 4.431
# create selection table
sel.tab <- data.frame(
sound.files = file.name,
selec =  1:(nrow(X) + 2),
start = c(delay, X$pb.start, X$pb.end[nrow(X)] + gap.duration),
end = c(delay + dur_strt_mrkr, X$pb.end, X$pb.end[nrow(X)] + gap.duration + dur_end_mrkr),
bottom.freq = c(flim[1] + mar.f, X$bottom.freq, flim[1] + mar.f),
top.freq = c(flim[2] - mar.f, X$top.freq, flim[2] - mar.f),
orig.sound.file = c("start_marker", X$sound.files, "end_marker"))
file.name
1:(nrow(X) + 2)
c(delay, X$pb.start, X$pb.end[nrow(X)] + gap.duration)
c(delay + dur_strt_mrkr, X$pb.end, X$pb.end[nrow(X)] + gap.duration + dur_end_mrkr)
c(flim[1] + mar.f, X$bottom.freq, flim[1] + mar.f)
mar.f
X$bottom.freq
source('~/Dropbox/R package testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R package testing/baRulho/baRulho/R/master_sound_file.R')
sls.rr <-master_sound_file(X = st, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 4.431)
source('~/Dropbox/R package testing/baRulho/baRulho/R/master_sound_file.R')
sls.rr <-master_sound_file(X = st, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 4.431)
st1 <- st2 <- st
st1
st1$selec <- 2
st1 <- st2 <- st
st1 <-rename_waves_est(st, new.selec = 2)
st1 <-rename_waves_est(st, new.selec = 2, new.sound.files = st$sound.files)
st1
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st3 <- st2 <- st
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
rbind(st1, st2)
rbind(st1, st2, st3)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
st4 <-rename_waves_est(st1, new.selec = 4, new.sound.files = st$sound.files)
st5 <-rename_waves_est(st1, new.selec = 5, new.sound.files = st$sound.files)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all <- rbind(st.all, st4)
st.all <- rbind(st.all, st5)
st.all
View(st.all)
dp <- "~/Dropbox/Projects/call_transmission_Diasporus/Controles para sigpro/"
st <- selection_table(whole.recs = TRUE, extended = TRUE, path = dp, confirm.extended = FALSE)
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
st4 <-rename_waves_est(st1, new.selec = 4, new.sound.files = st$sound.files)
st5 <-rename_waves_est(st1, new.selec = 5, new.sound.files = st$sound.files)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all <- rbind(st.all, st4)
st.all <- rbind(st.all, st5)
nrow(st.all)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
ad <- autodetec(threshold = 10, ssmooth = 600, bp = c(2, 5), parallel = 3)
ad <- autodetec(threshold = 10, ssmooth = 600, bp = c(2, 5), parallel = 3, path = dp)
ad <- autodetec(threshold = 10, ssmooth = 600, bp = c(2, 5), parallel = 3, path = "~/Dropbox/Projects/call_transmission_Diasporus/Cascajal 2 16 bits")
ad
table(ad$sound.files)
sls.rr
attr(st.all, "check.results")
attr(st.all, "wave.objects")
length(attr(st.all, "wave.objects"))
names(attr(st.all, "wave.objects"))
table(ad$sound.files)
sls.mn <- Rraven::imp_raven(path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/", all.data = TRUE)
sls.mn <- Rraven::imp_raven(path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/", all.data = TRUE, warbler.format = TRUE)
sls.mn
sls.man <- selection_table(sls.mn, extended = FALSE, confirm.extended = FALSE)
sls.man
sls.man <- selection_table(sls.mn, extended = FALSE, confirm.extended = FALSE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/")
sls.man
st.all$distance <- 1
st.all$sound.files
st.all$signal.type <- gsub(".wav_1", "", st.all$sound.files)
st.all$signal.type
st.all$signal.type
library(warbleR)
dp <- "~/Dropbox/Projects/call_transmission_Diasporus/Controles para sigpro/"
st <- selection_table(whole.recs = TRUE, extended = TRUE, path = dp, confirm.extended = FALSE)
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type
rep(1:5, 3)
st$signal.type <- paste(st$signal.type, rep(1:5, 3))
st$signal.type <- paste(st$signal.type, rep(1:5, 3), sep = "-")
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type <- paste(st$signal.type, rep(1:5, 3), sep = "-")
st$signal.type
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
st4 <-rename_waves_est(st1, new.selec = 4, new.sound.files = st$sound.files)
st5 <-rename_waves_est(st1, new.selec = 5, new.sound.files = st$sound.files)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all <- rbind(st.all, st4)
st.all <- rbind(st.all, st5)
st.all$distance <- 1
st.all
nrow(st.all)
sls.man
sls.mam$distance <- 5
sls.mn <- Rraven::imp_raven(path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/", all.data = TRUE, warbler.format = TRUE)
sls.man <- selection_table(sls.mn, extended = FALSE, confirm.extended = FALSE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/")
sls.mam$distance <- 5
sls.man
sls.man$distance <- 5
sls.man$signal.type <- st.all$signal.type[1:nrow(st.all)]
sls.man$signal.type <- st.all$signal.type[1:nrow(sls.man)]
sls.man$signal.type
sls.man
sls <- rbind(st.all, sls.man)
sls.man
st.all
st.all$top.freq <- 5
st.all$bottom.freq <- 2
sls <- rbind(st.all, sls.man)
names(st.all)
names(sls.man)
sls.man$View <- sls.man$Channel <- sls.man$selec.file <- st.all$channel <- NULL
sls <- rbind(st.all, sls.man)
sls
st.all
sls.man
sls <- rbind(st.all, sls.man)
sls
sls.man <- selection_table(sls.mn, extended = FALSE, confirm.extended = TRUE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/")
sls.man$distance <- 5
sls.man$signal.type <- st.all$signal.type[1:nrow(sls.man)]
st.all$top.freq <- 5
st.all$bottom.freq <- 2
names(st.all)
names(sls.man)
sls.man$View <- sls.man$Channel <- sls.man$selec.file <- st.all$channel <- NULL
names(st.all)
names(sls.man)
sls <- rbind(st.all, sls.man)
sls
sls.man
sls.man <- selection_table(sls.mn, extended = FALSE, confirm.extended = TRUE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/")
sls.man
sls.man <- selection_table(sls.mn, extended = TRUE, confirm.extended = FALSE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/")
sls.man$distance <- 5
sls.man$signal.type <- st.all$signal.type[1:nrow(sls.man)]
st.all$top.freq <- 5
st.all$bottom.freq <- 2
names(st.all)
names(sls.man)
sls.man$View <- sls.man$Channel <- sls.man$selec.file <- st.all$channel <- NULL
sls <- rbind(st.all, sls.man)
sls
sls.alg <- spcc_align(X = sls)
spectrograms(sls.alg, dest.path = tempdir(), res = 100, wl = 300, title.labels = "type", sel.labels = NULL)
spectrograms(sls.alg, dest.path = tempdir(), res = 100, wl = 300, title.labels = "signal.type")
open_wd(tempdir())
tempdir()
spectrograms(sls.alg, dest.path = tempdir(), res = 100, wl = 300, title.labels = "signal.type", mar = 1)
spectrograms(sls.alg, dest.path = tempdir(), res = 100, wl = 300, title.labels = "signal.type", mar = 1)
st.all
sls <- rbind(st.all[1:15, ], sls.man)
sls.alg <- spcc_align(X = sls)
spectrograms(sls.alg, dest.path = tempdir(), res = 100, wl = 300, title.labels = "signal.type", mar = 1)
library(warbleR)
dp <- "~/Dropbox/Projects/call_transmission_Diasporus/Controles para sigpro/"
st <- selection_table(whole.recs = TRUE, extended = TRUE, path = dp, confirm.extended = FALSE)
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type <- paste(st$signal.type, rep(1:5, each = 3), sep = "-")
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
st4 <-rename_waves_est(st1, new.selec = 4, new.sound.files = st$sound.files)
st5 <-rename_waves_est(st1, new.selec = 5, new.sound.files = st$sound.files)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all <- rbind(st.all, st4)
st.all <- rbind(st.all, st5)
st.all$distance <- 1
nrow(st.all)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
library(warbleR)
dp <- "~/Dropbox/Projects/call_transmission_Diasporus/Controles para sigpro/"
st <- selection_table(whole.recs = TRUE, extended = TRUE, path = dp, confirm.extended = FALSE)
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type <- paste(st$signal.type, rep(1:5, each = 3), sep = "-")
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st <- selection_table(whole.recs = TRUE, extended = TRUE, path = dp, confirm.extended = FALSE)
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type <- paste(st$signal.type, rep(1:5, each = 3), sep = "-")
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
st4 <-rename_waves_est(st1, new.selec = 4, new.sound.files = st$sound.files)
st5 <-rename_waves_est(st1, new.selec = 5, new.sound.files = st$sound.files)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all <- rbind(st.all, st4)
st.all <- rbind(st.all, st5)
st.all$distance <- 1
nrow(st.all)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
sls.rr
est.rr <- selection_table(sls.rr, extended = TRUE, path = dp, confirm.extended = FALSE)
est.rr
sls.rr
est.rr <- selection_table(sls.rr, extended = TRUE, path = "~/Dropbox/Projects/call_transmission_Diasporus/", confirm.extended = FALSE)
est.rr <- selection_table(sls.rr, extended = TRUE, path = "~/Dropbox/Projects/call_transmission_Diasporus/", confirm.extended = FALSE, by.song = TRUE)
est.rr <- selection_table(sls.rr, extended = TRUE, path = "~/Dropbox/Projects/call_transmission_Diasporus/", confirm.extended = FALSE, by.song = "sound.files")
est.rr
sls.rr
est.rr
sls.mn <- Rraven::imp_raven(path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/", all.data = TRUE, warbler.format = TRUE)
sls.man <- selection_table(sls.mn, extended = TRUE, confirm.extended = FALSE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/")
sls.man$distance <- 5
sls.man$signal.type <- st.all$signal.type[1:nrow(sls.man)]
st.all$top.freq <- 5
st.all$bottom.freq <- 2
names(st.all)
names(sls.man)
sls.man$View <- sls.man$Channel <- sls.man$selec.file <- st.all$channel <- NULL
sls <- rbind(st.all[1:15, ], sls.man)
sls
sls.man <- selection_table(sls.mn, extended = TRUE, confirm.extended = FALSE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/", by.song = TRUE)
sls.man$distance <- 5
sls.man <- selection_table(sls.mn, extended = TRUE, confirm.extended = FALSE, path = "~/Dropbox/Projects/call_transmission_Diasporus/trial/", by.song = "sound.files")
sls.man$distance <- 5
sls.man$signal.type <- st.all$signal.type[1:nrow(sls.man)]
st.all$top.freq <- 5
st.all$bottom.freq <- 2
names(st.all)
names(sls.man)
sls.man$View <- sls.man$Channel <- sls.man$selec.file <- st.all$channel <- NULL
sls <- rbind(st.all[1:15, ], sls.man)
sls.man
st.all
names(est.rr)
names(sls.man)
est.rr$top.freq <- 5
est.rr$bottom.freq <- 2
names(est.rr)
names(sls.man)
est.rr$distance <- 1
est.rr$signal.type <- gsub(".wav_1", "", est.rr$sound.files)
est.rr$signal.type <- gsub(".wav_1", "", est.rr$sound.files)
est.rr$signal.type <- paste(est.rr$signal.type, rep(1:5, each = 3), sep = "-")
est.rr$signal.type
est.rr$signal.type <- gsub(".wav_1", "", est.rr$sound.files)
est.rr$signal.type
est.rr$signal.type
library(warbleR)
dp <- "~/Dropbox/Projects/call_transmission_Diasporus/Controles para sigpro/"
st <- selection_table(whole.recs = TRUE, extended = TRUE, path = dp, confirm.extended = FALSE)
st$signal.type <- gsub(".wav_1", "", st$sound.files)
st$signal.type <- paste(st$signal.type, rep(1:5, each = 3), sep = "-")
st1 <- resample_est(st, samp.rate = 44.1, bit.depth = 16)
st2 <-rename_waves_est(st1, new.selec = 2, new.sound.files = st$sound.files)
st3 <-rename_waves_est(st1, new.selec = 3, new.sound.files = st$sound.files)
st4 <-rename_waves_est(st1, new.selec = 4, new.sound.files = st$sound.files)
st5 <-rename_waves_est(st1, new.selec = 5, new.sound.files = st$sound.files)
st.all <- rbind(st1, st2)
st.all <- rbind(st.all, st3)
st.all <- rbind(st.all, st4)
st.all <- rbind(st.all, st5)
nrow(st.all)
st.all$distance <- 1
nrow(st.all)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
dev.off()
dev.off()
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
tempdir()
graphics.off()
source('~/Dropbox/R package testing/baRulho/baRulho/R/master_sound_file.R')
st.all
sls.rr <-master_sound_file(X = st.all, gap.duration = 2, dest.path = dp, "1m_rerecorded", overwrite = TRUE, delay = 5)
View(last.img)
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "warbleR", "monitoR", "pkgdown", "ape", "baRulho", "spelling", "ggplot2", "png", "viridis")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven", "baRulho", "NatureSounds")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
}
)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("~/Dropbox/R package testing/baRulho/baRulho/R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "/home/m/Dropbox/R package testing/baRulho/baRulho/R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "/home/m/Dropbox/R package testing/baRulho/baRulho/R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "/home/m/Dropbox/R package testing/baRulho/baRulho/R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "/home/m/Dropbox/R package testing/baRulho/baRulho/R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "/home/m/Dropbox/R package testing/baRulho/baRulho/R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
#delete NAMESPACE file
unlink("/home/m/Dropbox/R package testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R package testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R package testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R package testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R package testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R package testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R package testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R package testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
setwd("~/Dropbox/R package testing/baRulho/baRulho")
#built site
pkgdown::build_site()
#built site
pkgdown::build_site()
#sent to github
system("git add .")
system('git commit -m  "bug in spcc_align()"')
