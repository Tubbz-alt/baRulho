sgnl <-  X$TEMP....sgnl[x]
# calculate all spectra apply function
specs <- pbapply::pblapply(X = 1:nrow(X), cl = cl, FUN = function(y, wl)   {
clp <- warbleR::read_wave(X = X, index = y)
seewave::spec(wave = clp, f = clp@samp.rate, plot = FALSE, wl = wl)
})
# add sound file selec column and names to spectra (weird column name so it does not overwrite user columns)
X$TEMP....sgnl <- names(specs) <- paste(X$sound.files, X$selec, sep = "-")
# add second column with names of the reference signals to be compare against
X$TEMP....rfrnc <- sapply(1:nrow(X), function(x, meth = method){
# extract for single signal and order by distance
Y <- as.data.frame(X[X$signal.id == X$signal.id[X$TEMP....sgnl == X$TEMP....sgnl[x]], , drop = FALSE])
Y <- Y[order(Y$distance), ]
# method 1 compare to closest distance to source
if (meth == 1) z <- Y$TEMP....sgnl[which.min(Y$distance)] else # if method 2
# if not the first row then the previous row
if (Y$TEMP....sgnl[1] != X$TEMP....sgnl[x]) z <- X$TEMP....sgnl[x - 1] else # else the first row
z <- Y$TEMP....sgnl[1]
return(z)
})
# get names of signal and reference
sgnl <-  X$TEMP....sgnl[x]
rfrnc <- X$TEMP....rfrnc[x]
# extract spectrum for signal and model
sgnl.spc <- specs[[which(names(specs) == sgnl)]]
rfrnc.spc <- specs[[which(names(specs) == rfrnc)]]
# make them the same frequency range as reference
bp <- c(X$bottom.freq[X$TEMP....sgnl == rfrnc], X$top.freq[X$TEMP....sgnl == rfrnc])
bp <- bp + c(-0.2, 0.2)       # add 0.2 kHz buffer
if (bp[1] < 0)  # force 0 if negative
bp[1] <- 0
if (bp[2] > ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1)
bp[2] <- ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1 # force lower than nyquist freq if higher
# homogenize freq range and remove freq column
sgnl.spc <- sgnl.spc[sgnl.spc[, 1] > bp[1] & sgnl.spc[, 2] < bp[2], 2]
rfrnc.spc <- rfrnc.spc[rfrnc.spc[, 1] > bp[1] & rfrnc.spc[, 2] < bp[2], 2]
# applied ssmooth
if (!is.null(ssmooth)) {
sgnl.spc <- as.matrix(seewave:::sumsmooth(sgnl.spc, wl = ssmooth))
rfrnc.spc <- as.matrix(seewave:::sumsmooth(rfrnc.spc, wl = ssmooth))
}
# convert envelopes to PMF (probability mass function)
rfrnc.pmf <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
# get blur ratio as half the sum of absolute differences between spectra PMFs
bl.rt <- sum(abs(rfrnc.spc - sgnl.spc)) / 2
bl.rt
rfrnc.spc - sgnl.spc
rfrnc.spc
# get names of signal and reference
sgnl <-  X$TEMP....sgnl[x]
rfrnc <- X$TEMP....rfrnc[x]
# if signals are the same or the selection is noise return NA
if (sgnl == rfrnc | any(c(X$signal.id[X$TEMP....sgnl == sgnl], X$signal.id[X$TEMP....rfrnc == rfrnc]) == "noise")) out <- NA else {
# extract spectrum for signal and model
sgnl.spc <- specs[[which(names(specs) == sgnl)]]
rfrnc.spc <- specs[[which(names(specs) == rfrnc)]]
# make them the same frequency range as reference
bp <- c(X$bottom.freq[X$TEMP....sgnl == rfrnc], X$top.freq[X$TEMP....sgnl == rfrnc])
bp <- bp + c(-0.2, 0.2)       # add 0.2 kHz buffer
if (bp[1] < 0)  # force 0 if negative
bp[1] <- 0
if (bp[2] > ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1)
bp[2] <- ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1 # force lower than nyquist freq if higher
# homogenize freq range and remove freq column
sgnl.spc <- sgnl.spc[sgnl.spc[, 1] > bp[1] & sgnl.spc[, 2] < bp[2], 2]
rfrnc.spc <- rfrnc.spc[rfrnc.spc[, 1] > bp[1] & rfrnc.spc[, 2] < bp[2], 2]
# applied ssmooth
if (!is.null(ssmooth)) {
sgnl.spc <- as.matrix(seewave:::sumsmooth(sgnl.spc, wl = ssmooth))
rfrnc.spc <- as.matrix(seewave:::sumsmooth(rfrnc.spc, wl = ssmooth))
}
# convert envelopes to PMF (probability mass function)
rfrnc.pmf <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
# get blur ratio as half the sum of absolute differences between spectra PMFs
bl.rt <- sum(abs(rfrnc.spc - sgnl.spc)) / 2
# plot
if (img)
{
warbleR:::img_wrlbr_int(filename = paste0("blur_ratio_", X$signal.id[x], "-", rfrnc, "-", sgnl, ".jpeg"), path = dest.path, width = 10.16 * 1.5,
height = 10.16 , units = "cm", res = res)
# create time values for area calculation
f.vals <- seq(bp[1], bp[2], length.out = length(rfrnc.spc))
# difference between spectra
spc.diff <- rfrnc.spc - sgnl.spc
# matrix for layout
ly.mat <- matrix(
c(0, 0.3, 0, 0.5, # bottom left spectrogram
0, 0.3, 0.5, 1, # top left spectrogram
0.2, 1, 0, 1),  # right pannel spectra
nr = 3, byrow = TRUE)
# close if open any screen
invisible(close.screen(all.screens = TRUE))
split.screen(ly.mat)
# plot spectra
screen(3)
# set image margins
par(mar = rep(4, 0, 4, 4))
# reference spectrum first
plot(x = rfrnc.spc, y = f.vals,  type = "l", xlab = "", ylab = "", col = "#6DCD59FF", xlim = c(min(rfrnc.spc, sgnl.spc), max(rfrnc.spc, sgnl.spc) * 1.1), cex.main = 0.8, lwd = 1.2, yaxt = "n")
# add x axis label
mtext(text = "Power spectrum (PMF)", side = 1, line = 2.5)
# add title
mtext(text = paste("Signal type:", X$signal.id[x]), side = 3, line = 3, cex = 0.7)
mtext(text = paste("Reference:", rfrnc), side = 3, line = 2, col = "#6DCD59FF", cex = 0.7)
mtext(text = paste("Signal:", sgnl), side = 3, line = 1, col = "#440154", cex = 0.7)
# add y axis
axis(side = 4)
mtext(text = "Frequency (kHz)", side = 4, line = 2.5)
# add signal spectrum
lines(sgnl.spc, f.vals, col= "#440154FF", lwd = 1.2)
# signal spectrum on top
polygon(y = c(f.vals, rev(f.vals)), x = c(sgnl.spc, rev(rfrnc.spc)), col = "#3E4A8933", border = NA)
# get plotting area limits
usr <- par("usr")
# and blu ratio value
text(x = ((usr[1] + usr[2]) / 2) + usr[1], y = usr[4] * 0.9, paste("Blur ratio:", round(bl.rt, 2)), cex = 0.8)
# spectrogram of reference
screen(1)
# calculate margin for spectrogram
mar.rf <- attr(X, "check.results")$duration[which(paste(X$sound.files, X$selec, sep = "-") == rfrnc)] / 4
# index of reference
rf.indx <- which(paste(X$sound.files, X$selec, sep = "-") == rfrnc)
# freq limit of reference
flim <- c(X$bottom.freq[rf.indx], X$top.freq[rf.indx])
# extract clip reference and signal
clp.sgnl <- warbleR::read_wave(X = X, index = x, from = X$start[x] - mar.rf, X$end[x] + mar.rf)
clp.rfnc <- warbleR::read_wave(X = X, index = rf.indx, from = X$start[rf.indx] - mar.rf, X$end[rf.indx] + mar.rf)
## plot spectros
# signal at bottom left
screen(1)
par(mar = c(0.3, 0.3, 0.15, 0.3))
warbleR:::spectro_wrblr_int2(wave = clp.sgnl, f = clp.sgnl@samp.rate,
flim = flim,  axisX = FALSE, axisY = FALSE,
tlab = NULL, flab = NULL, main = NULL, grid = FALSE, rm.zero = TRUE, cexaxis = cex * 1.2, add = TRUE, ovlp = ovlp, wl = wl, collevels = collevels, palette = pal)
# add box with signal color
box(col = "#440154FF", lwd = 3)
# reference at top left
screen(2)
par(mar = c(0.15, 0.3, 0.3, 0.3))
warbleR:::spectro_wrblr_int2(wave = clp.sgnl, f = clp.sgnl@samp.rate,
flim = flim,  axisX = FALSE, axisY = FALSE,
tlab = NULL, flab = NULL, main = NULL, grid = FALSE, rm.zero = TRUE, cexaxis = cex * 1.2, add = TRUE, ovlp = ovlp, wl = wl, collevels = collevels, palette = pal)
# add box with reference color
box(col = "#6DCD59FF", lwd = 3)
# close graph
dev.off()
}
# return maximum correlation
return(bl.rt)
}
# calculate all spectra apply function
specs <- pbapply::pblapply(X = 1:nrow(X), cl = cl, FUN = function(y, wl)   {
clp <- warbleR::read_wave(X = X, index = y)
seewave::spec(wave = clp, f = clp@samp.rate, plot = FALSE, wl = wl)
})
# add sound file selec column and names to spectra (weird column name so it does not overwrite user columns)
X$TEMP....sgnl <- names(specs) <- paste(X$sound.files, X$selec, sep = "-")
# add second column with names of the reference signals to be compare against
X$TEMP....rfrnc <- sapply(1:nrow(X), function(x, meth = method){
# extract for single signal and order by distance
Y <- as.data.frame(X[X$signal.id == X$signal.id[X$TEMP....sgnl == X$TEMP....sgnl[x]], , drop = FALSE])
Y <- Y[order(Y$distance), ]
# method 1 compare to closest distance to source
if (meth == 1) z <- Y$TEMP....sgnl[which.min(Y$distance)] else # if method 2
# if not the first row then the previous row
if (Y$TEMP....sgnl[1] != X$TEMP....sgnl[x]) z <- X$TEMP....sgnl[x - 1] else # else the first row
z <- Y$TEMP....sgnl[1]
return(z)
})
# get names of signal and reference
sgnl <-  X$TEMP....sgnl[x]
rfrnc <- X$TEMP....rfrnc[x]
# extract spectrum for signal and model
sgnl.spc <- specs[[which(names(specs) == sgnl)]]
rfrnc.spc <- specs[[which(names(specs) == rfrnc)]]
# make them the same frequency range as reference
bp <- c(X$bottom.freq[X$TEMP....sgnl == rfrnc], X$top.freq[X$TEMP....sgnl == rfrnc])
bp <- bp + c(-0.2, 0.2)       # add 0.2 kHz buffer
if (bp[1] < 0)  # force 0 if negative
bp[1] <- 0
if (bp[2] > ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1)
bp[2] <- ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1 # force lower than nyquist freq if higher
# homogenize freq range and remove freq column
sgnl.spc <- sgnl.spc[sgnl.spc[, 1] > bp[1] & sgnl.spc[, 2] < bp[2], 2]
rfrnc.spc <- rfrnc.spc[rfrnc.spc[, 1] > bp[1] & rfrnc.spc[, 2] < bp[2], 2]
sgnl.spc
# applied ssmooth
if (!is.null(ssmooth)) {
sgnl.spc <- as.matrix(seewave:::sumsmooth(sgnl.spc, wl = ssmooth))
rfrnc.spc <- as.matrix(seewave:::sumsmooth(rfrnc.spc, wl = ssmooth))
}
# convert envelopes to PMF (probability mass function)
rfrnc.pmf <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
sum(rfrnc.pmf)
sum(abs(rfrnc.spc - sgnl.spc)) / 2
# convert envelopes to PMF (probability mass function)
rfrnc.spc <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
# extract spectrum for signal and model
sgnl.spc <- specs[[which(names(specs) == sgnl)]]
rfrnc.spc <- specs[[which(names(specs) == rfrnc)]]
# make them the same frequency range as reference
bp <- c(X$bottom.freq[X$TEMP....sgnl == rfrnc], X$top.freq[X$TEMP....sgnl == rfrnc])
bp <- bp + c(-0.2, 0.2)       # add 0.2 kHz buffer
if (bp[1] < 0)  # force 0 if negative
bp[1] <- 0
if (bp[2] > ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1)
bp[2] <- ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1 # force lower than nyquist freq if higher
# homogenize freq range and remove freq column
sgnl.spc <- sgnl.spc[sgnl.spc[, 1] > bp[1] & sgnl.spc[, 2] < bp[2], 2]
rfrnc.spc <- rfrnc.spc[rfrnc.spc[, 1] > bp[1] & rfrnc.spc[, 2] < bp[2], 2]
# applied ssmooth
if (!is.null(ssmooth)) {
sgnl.spc <- as.matrix(seewave:::sumsmooth(sgnl.spc, wl = ssmooth))
rfrnc.spc <- as.matrix(seewave:::sumsmooth(rfrnc.spc, wl = ssmooth))
}
# convert envelopes to PMF (probability mass function)
rfrnc.spc <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
# get blur ratio as half the sum of absolute differences between spectra PMFs
bl.rt <- sum(abs(rfrnc.spc - sgnl.spc)) / 2
bl.rt
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 200, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 10, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
FUN <- "spectrum_correlation"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("using method 1")
a <- spectrum_correlation(X = playback_est)
print("using method 1 and ssmooth = 200")
b <- spectrum_correlation(X = playback_est)
print("using method 1 and msmooth")
b2 <- spectrum_correlation(X = playback_est)
print("using method 2")
a <- spectrum_correlation(X = playback_est, method = 2)
print("using method 2 and ssmooth = 200")
b <- spectrum_correlation(X = playback_est, method = 2)
print("using method 2 and ssmooth = 200,  no pb")
spectrum_correlation(X = playback_est, method = 2, pb = FALSE)
print("all is good!")
}
FUN <- "blur_ratio_spectrum"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio_spectrum(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio_spectrum(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio_spectrum(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
viridis::viridis(10)
a <- viridis::viridis(10)
plot(1:10, pch = 20, col = a)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
rm.img()
open_wd(tempdir())
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
adjustcolor("#07889B", alpha.f = 0.4)
adjustcolor("#07889B", alpha.f = 0.2)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio.R')
FUN <- "blur_ratio_spectrum"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio_spectrum(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio_spectrum(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio_spectrum(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
FUN <- "blur_ratio"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 200, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
source('~/Dropbox/baRulho/R/blur_ratio.R')
FUN <- "blur_ratio"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 200, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
FUN <- "envelope_correlation"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
a <- envelope_correlation(X = playback_est)
b <- envelope_correlation(X = playback_est, ssmooth = 700, img = TRUE)
FUN <- "blur_ratio_spectrum"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
blur_ratio_spectrum(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio_spectrum(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
print("using method 2 ")
b <- blur_ratio_spectrum(X = playback_est, method = 2, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 50, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
sgnl.spc <- as.matrix(seewave::sumsmooth(sgnl.spc, wl = ssmooth))
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
# check spelling
devtools::spell_check("/home/m/Dropbox/baRulho")
# only build manual
setwd("/home/m/Dropbox/baRulho")
unlink(list.files(pattern = "baRulho\\.pdf", path = "/home/m/Dropbox/baRulho/"))
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
#built site
pkgdown::build_site(pkg = "~/Dropbox/baRulho")
#sent to github
system("git add .")
system('git commit -m  "added blur_ratio() and blur_ratio_spectrum"')
#sent to github
system("git add .")
