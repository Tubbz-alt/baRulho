}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "/home/m/Dropbox/R_package_testing/baRulho/baRulho/R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "/home/m/Dropbox/R_package_testing/baRulho/baRulho/R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
FUN <- "search_templates"
FUN <- "search_templates"
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
X
master.sf
which(master.sf$orig.sound.file == "start_marker")
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = "example_test1.wav", "example_test2.wav", path = NULL)
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = NULL)
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td)
pks
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker")
source('~/.active-rstudio-document', echo=TRUE)
template.rows
template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker")
FUN <- "search_templates"
#run function
run.all()
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
template.rows = which(master.sf$orig.sound.file == "start_marker")
template.rows
template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker")
template.rows
X = master.sf
test.files = c("example_test1.wav", "example_test1.wav")
path = td
paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-")
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td)
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
c(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows]), test.files)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
c("example_test1.wav", "example_test2.wav", "example_test1.wav")
X = master.sf
template.rows = which(master.sf$orig.sound.file == "start_marker")
test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav")
test.files
path = td
if (length(template.rows) != 1 & length(test.files) != length(template.rows)) stop("'template.rows' must be 1 or the same length than 'test.files'")
# create a matrix that contains the selection/files to be cross-correlated
if (length(template.rows) == 1) # in only 1 template, repeate it
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), length(test.files)), test.files), nrow = 2) else
# create a matrix that contains the selection/files to be cross-correlated
if (length(template.rows) == 1) # in only 1 template, repeate it
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), length(test.files)), test.files), nrow = 2) else
comp_mat <- matrix(c(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), test.files), nrow = 2)
comp_mat
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), length(test.files)), test.files), nrow = 2) else
# create a matrix that contains the selection/files to be cross-correlated
if (length(template.rows) == 1) # in only 1 template, repeate it
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), length(test.files)), test.files), nrow = 2) else
comp_mat <- matrix(c(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), test.files), ncol = 2)
comp_mat
length(template.rows)
# create a matrix that contains the selection/files to be cross-correlated
if (length(template.rows) == 1) # in only 1 template, repeate it
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), length(test.files)), test.files), ncol = 2) else
comp_mat <- matrix(c(paste(master.sf$sound.files[template.rows], master.sf$selec[template.rows], sep = "-"), test.files), ncol = 2)
comp_mat
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test1.wav"), path = td)
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test1.wav"), path = td)
comp_mat
# run cross correlation
xc <- xcorr(X, compare.matrix = comp_mat, wl = 300, ovlp = 30, path = path, output = "list")
xc
search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test1.wav"), path = td)
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test1.wav"), path = td)
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
FUN <- "align_test_files"
#run function
run.all()
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
specreator(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
### by end marker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_end"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
### by end marker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
X =  master.sf
Y = pks
Y
path = td
output = "est"
X$orig.sound.file
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
alg.tests
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
### by end marker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
# by start and end maker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file %in% c("start_marker", "end_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
which(master.sf$orig.sound.file %in% c("start_marker", "end_marker")
which(master.sf$orig.sound.file %in% c("start_marker", "end_marker")
# by start and end maker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file %in% c("start_marker", "end_marker")), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
pks
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td, wl = 1000); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
### by end marker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
# by start and end maker
pks <- search_template(X = master.sf, template.rows = which(master.sf$orig.sound.file %in% c("start_marker", "end_marker")), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_template.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
path <- "~/Dropbox/R_package_testing/baRulho/baRulho/R"
pattern <-  "search_template"
find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)
FUN <- "search_templates"
#run function
run.all()
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
pks <- search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
pks <- search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td); pks
search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test1.wav"), path = td)
(pks <- search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td))
(pks <- search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav", "example_test1.wav"), path = td, pb = FALSE))
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_templates.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
setwd("~/Dropbox/R_package_testing/baRulho/baRulho")
#built site
pkgdown::build_site()
#sent to github
system("git add .")
system("git add .")
system('git commit -m  "added search_templates()"')
remove.packages("baRulho")
#
# #restart R
.rs.restartR()
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "warbleR", "monitoR", "pkgdown", "ape", "baRulho", "spelling", "ggplot2", "png", "viridis")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven", "baRulho", "NatureSounds")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
}
)
remove.packages("warbleR")
#
# #restart R
.rs.restartR()
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "warbleR", "monitoR", "pkgdown", "ape", "baRulho", "spelling", "ggplot2", "png", "viridis")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven", "baRulho", "NatureSounds")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
}
)
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
