sgnl.spc <- specs[[which(names(specs) == sgnl)]]
rfrnc.spc <- specs[[which(names(specs) == rfrnc)]]
# make them the same frequency range as reference
bp <- c(X$bottom.freq[X$TEMP....sgnl == rfrnc], X$top.freq[X$TEMP....sgnl == rfrnc])
bp <- bp + c(-0.2, 0.2)       # add 0.2 kHz buffer
if (bp[1] < 0)  # force 0 if negative
bp[1] <- 0
if (bp[2] > ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1)
bp[2] <- ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1 # force lower than nyquist freq if higher
# homogenize freq range and remove freq column
sgnl.spc <- sgnl.spc[sgnl.spc[, 1] > bp[1] & sgnl.spc[, 2] < bp[2], 2]
rfrnc.spc <- rfrnc.spc[rfrnc.spc[, 1] > bp[1] & rfrnc.spc[, 2] < bp[2], 2]
sgnl.spc
# applied ssmooth
if (!is.null(ssmooth)) {
sgnl.spc <- as.matrix(seewave:::sumsmooth(sgnl.spc, wl = ssmooth))
rfrnc.spc <- as.matrix(seewave:::sumsmooth(rfrnc.spc, wl = ssmooth))
}
# convert envelopes to PMF (probability mass function)
rfrnc.pmf <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
sum(rfrnc.pmf)
sum(abs(rfrnc.spc - sgnl.spc)) / 2
# convert envelopes to PMF (probability mass function)
rfrnc.spc <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
# extract spectrum for signal and model
sgnl.spc <- specs[[which(names(specs) == sgnl)]]
rfrnc.spc <- specs[[which(names(specs) == rfrnc)]]
# make them the same frequency range as reference
bp <- c(X$bottom.freq[X$TEMP....sgnl == rfrnc], X$top.freq[X$TEMP....sgnl == rfrnc])
bp <- bp + c(-0.2, 0.2)       # add 0.2 kHz buffer
if (bp[1] < 0)  # force 0 if negative
bp[1] <- 0
if (bp[2] > ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1)
bp[2] <- ceiling(attr(X, "check.results")$sample.rate[1] / 2) - 1 # force lower than nyquist freq if higher
# homogenize freq range and remove freq column
sgnl.spc <- sgnl.spc[sgnl.spc[, 1] > bp[1] & sgnl.spc[, 2] < bp[2], 2]
rfrnc.spc <- rfrnc.spc[rfrnc.spc[, 1] > bp[1] & rfrnc.spc[, 2] < bp[2], 2]
# applied ssmooth
if (!is.null(ssmooth)) {
sgnl.spc <- as.matrix(seewave:::sumsmooth(sgnl.spc, wl = ssmooth))
rfrnc.spc <- as.matrix(seewave:::sumsmooth(rfrnc.spc, wl = ssmooth))
}
# convert envelopes to PMF (probability mass function)
rfrnc.spc <- rfrnc.spc / sum(rfrnc.spc)
sgnl.spc <- sgnl.spc / sum(sgnl.spc)
# get blur ratio as half the sum of absolute differences between spectra PMFs
bl.rt <- sum(abs(rfrnc.spc - sgnl.spc)) / 2
bl.rt
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 200, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 10, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
FUN <- "spectrum_correlation"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("using method 1")
a <- spectrum_correlation(X = playback_est)
print("using method 1 and ssmooth = 200")
b <- spectrum_correlation(X = playback_est)
print("using method 1 and msmooth")
b2 <- spectrum_correlation(X = playback_est)
print("using method 2")
a <- spectrum_correlation(X = playback_est, method = 2)
print("using method 2 and ssmooth = 200")
b <- spectrum_correlation(X = playback_est, method = 2)
print("using method 2 and ssmooth = 200,  no pb")
spectrum_correlation(X = playback_est, method = 2, pb = FALSE)
print("all is good!")
}
FUN <- "blur_ratio_spectrum"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio_spectrum(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio_spectrum(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio_spectrum(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
viridis::viridis(10)
a <- viridis::viridis(10)
plot(1:10, pch = 20, col = a)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
rm.img()
open_wd(tempdir())
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
adjustcolor("#07889B", alpha.f = 0.4)
adjustcolor("#07889B", alpha.f = 0.2)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
source('~/Dropbox/baRulho/R/blur_ratio.R')
FUN <- "blur_ratio_spectrum"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio_spectrum(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio_spectrum(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio_spectrum(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
FUN <- "blur_ratio"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 200, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
source('~/Dropbox/baRulho/R/blur_ratio.R')
FUN <- "blur_ratio"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
{
print("output est")
a <- blur_ratio(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 200, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
print("output data frame")
blur_ratio(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 200, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 1 and ssmooth = 200")
b <- blur_ratio(X = playback_est, method = 1, ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
blur_ratio(X = playback_est, method = 2, ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("all is good!")
}
FUN <- "envelope_correlation"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
a <- envelope_correlation(X = playback_est)
b <- envelope_correlation(X = playback_est, ssmooth = 700, img = TRUE)
FUN <- "blur_ratio_spectrum"
#run function
source(file.path("~/Dropbox/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
a <- blur_ratio_spectrum(X = playback_est, img = TRUE, wl = 200, ovlp = 90, ssmooth = 50, dest.path = tempdir(), collevels = seq(-40, 0, 5)); last.img(); rm.img()
blur_ratio_spectrum(X = playback_est, output = "data.frame")
print("using method 1 and msmooth")
b2 <- blur_ratio_spectrum(X = playback_est, msmooth = c(700, 50))
print("using method 2 and ssmooth = 200")
print("using method 2 ")
b <- blur_ratio_spectrum(X = playback_est, method = 2, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2)
print("using method 2")
a <- blur_ratio_spectrum(X = playback_est, method = 2, collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
b <- blur_ratio_spectrum(X = playback_est, method = 1, ssmooth = 50, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
sgnl.spc <- as.matrix(seewave::sumsmooth(sgnl.spc, wl = ssmooth))
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
source('~/Dropbox/baRulho/R/blur_ratio_spectrum.R')
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
# check spelling
devtools::spell_check("/home/m/Dropbox/baRulho")
# only build manual
setwd("/home/m/Dropbox/baRulho")
unlink(list.files(pattern = "baRulho\\.pdf", path = "/home/m/Dropbox/baRulho/"))
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
#built site
pkgdown::build_site(pkg = "~/Dropbox/baRulho")
#sent to github
system("git add .")
system('git commit -m  "added blur_ratio() and blur_ratio_spectrum"')
#sent to github
system("git add .")
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "warbleR", "monitoR", "pkgdown", "ape", "baRulho", "spelling")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven", "baRluho", "NatureSounds")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
}
)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("~/Dropbox/baRulho/R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "/home/m/Dropbox/baRulho/R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usaige|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "/home/m/Dropbox/baRulho/R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "/home/m/Dropbox/baRulho/R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "/home/m/Dropbox/baRulho/R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "/home/m/Dropbox/baRulho/R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
#delete NAMESPACE file
unlink("/home/m/Dropbox/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/baRulho")
devtools::document("/home/m/Dropbox/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/baRulho", document = TRUE, run_dont_test = FALSE)
# check spelling
devtools::spell_check("/home/m/Dropbox/baRulho")
unlink(list.files(pattern = "baRulho\\.pdf", path = "/home/m/Dropbox/baRulho/"))
# only build manual
setwd("/home/m/Dropbox/baRulho")
system("R CMD Rd2pdf /home/m/Dropbox/baRulho")
setwd("~/Dropbox/baRulho")
#built site
pkgdown::build_site(pkg = "~/Dropbox/baRulho")
#built site
pkgdown::build_site(pkg = "~/Dropbox/baRulho")
# build tar.gz package file
setwd("~/Dropbox/R package testing/")
system("R CMD build /home/m/Dropbox/baRulho --resave-data=best")
#sent to github
system("git add .")
#sent to github
system("git add .")
system('git commit -m  "small changes in documentation"')
setwd("~/Dropbox/baRulho")
#sent to github
system("git add .")
system('git commit -m  "small changes in documentation"')
