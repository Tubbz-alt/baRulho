fi$uid[which.max(fi$mtime)]
rownames(fi)[which.max(fi$mtime)]
strt.img <- rownames(fi)[which.max(fi$mtime)]
print(strt.img)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 5)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 25)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
recordPlot()
# remove margins in graphic device
par(mar = rep(0, 4))
# empty plot
plot(0, type='n',axes = FALSE, ann = FALSE, xlim = c(0, 1), ylim = c(0, 1))
# add text
text(x = 0.5, y = 0.5, labels = "*start+", cex = cex, font = 1)
plt <- recordPlot()
plt
str(plt)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 25)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
print("using margin for noise and method 1 and flim c(0, 4)")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, flim = c(0, ))
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, flim = c(0, 10))
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5))
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
checksels()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
FUN <- "align_test_files"
#run function
run.all()
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
load("./data/playback_est.rda")
setwd("~/Dropbox/R_package_testing/baRulho/baRulho")
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
specreator(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
# create a matrix that contains the selection/files to be cross-correlated
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[1], master.sf$selec[1], sep = "-"), 2), "example_test1.wav", "example_test2.wav"), nrow = 2)
# run cross correlation
xc <- xcorr(master.sf, compare.matrix = comp_mat, wl = 100, ovlp = 50, path = td, output = "list")
# find peaks
pks <- find_peaks(xc.output = xc, max.peak = TRUE, path = td)
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
td
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
X =  master.sf
Y = pks
path = td
#check output
if (!any(output %in% c("est", "data.frame"))) stop("'output' must be either 'est' or 'data.frame'")
# align each file
out <- lapply(1:nrow(Y), function(x) {
# name of master sound file
mstr.nm <- substr(Y$template[x], start = 0, regexpr("\\-[^\\-]*$", Y$template[x]) - 1)
# start on new recording
start  <- X$start - X$start[X$sound.files == mstr.nm & X$orig.sound.file == marker] + Y$start[x]
# end on new recording
end  <- X$end - X$end[X$sound.files == mstr.nm & X$orig.sound.file == marker] + Y$end[x]
# make data frame
W <- data.frame(sound.files = Y$sound.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq[1:length(start)], top.freq = X$top.freq[1:length(start)], template = X$orig.sound.file[1:length(start)])
return(W)
})
# put data frames togheter
sync.sls <- do.call(rbind, out)
# if (max(sync.sls$end) > duration(file.path))
cs <- check_sels(sync.sls, path = path, pb = FALSE)
sync.sls
sapply(file.path(path, sync.sls$sound.files), duration)
sapply(file.path(path, sync.sls$sound.files), read_wave)
file.path(path, sync.sls$sound.files)
# check if any selection exceeds length of recordings
wi <- wav_info(path = path)
wi
merge(sync.sls, wi[, c("sound.files", "duration")])
sync.sls <- merge(sync.sls, wi[, c("sound.files", "duration")])
sync.sls
sync.sls$end > sync.sls$duration
any(sync.sls$end > sync.sls$duration)
!sync.sls$end > sync.sls$duration
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
# check if any selection exceeds length of recordings
wi <- wav_info(path = path)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
wi <- wav_info(path = path, pb = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img()#; rm.img()
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
warbleR::specreator(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img()
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 30)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
dev.off()
dev.off()
ps.options()
dev2bitmap
gsexe <- tools::find_gs_cmd()
gsexe
nzchar(gsexe)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
nzchar(gsexe)
gsexe
nzchar(gsexe)
gsexe <- vector()
gsexe
nzchar(gsexe)
gsexe <- c()
nzchar(gsexe)
gsexe <- ""
nzchar(gsexe)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
#open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
print("using margin for noise and method 1 and flim c(0, 4)")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, flim = c(0, 10))
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
#open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
print("using margin for noise and method 1 and flim c(0, 4)")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, flim = c(0, 10))
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/master_sound_file.R')
rm.img(tempdir())
open_wd(tempdir())
FUN <- "master_sound_file"
#run function
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
#open in rstudio
#open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
print("using margin for noise and method 1 and flim c(0, 4)")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, flim = c(0, 10))
specreator(master.st, path = tempdir(), by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5)); last.img(); rm.img()
#delete NAMESPACE file
unlink("/home/m/Dropbox/R_package_testing/baRulho/baRulho/NAMESPACE")
#run document twice
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
devtools::document("/home/m/Dropbox/R_package_testing/baRulho/baRulho")
#check with devtools
devtools::check("/home/m/Dropbox/R_package_testing/baRulho/baRulho", document = TRUE, run_dont_test = FALSE)
setwd("~/Dropbox/R_package_testing/baRulho/baRulho")
#built site
pkgdown::build_site()
system("git add .")
system('git commit -m  "master_sound_files() works without ghostscript"')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
FUN <- "align_test_files"
#run function
run.all()
source(file.path("~/Dropbox/R_package_testing/baRulho/baRulho/R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
specreator(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
# create a matrix that contains the selection/files to be cross-correlated
comp_mat <- matrix(c(rep(paste(master.sf$sound.files[1], master.sf$selec[1], sep = "-"), 2), "example_test1.wav", "example_test2.wav"), nrow = 2)
# run cross correlation
xc <- xcorr(master.sf, compare.matrix = comp_mat, wl = 100, ovlp = 50, path = td, output = "list")
# find peaks
pks <- find_peaks(xc.output = xc, max.peak = TRUE, path = td)
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
